"""
–ó–∞–≤–¥–∞–Ω–Ω—è 1: –î–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ delete –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –≤ HashTable

–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ –∑ –º–µ—Ç–æ–¥–æ–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ –ª–∞–Ω—Ü—é–∂–∫—ñ–≤ 
–¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∫–æ–ª—ñ–∑—ñ–π.
"""

class HashTable:
    def __init__(self, size):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—é –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É.
        
        Args:
            size (int): –†–æ–∑–º—ñ—Ä —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ
        """
        self.size = size
        self.table = [[] for _ in range(self.size)]

    def hash_function(self, key):
        """
        –•–µ—à-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–∞ –≤ —ñ–Ω–¥–µ–∫—Å —Ç–∞–±–ª–∏—Ü—ñ.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è
            
        Returns:
            int: –Ü–Ω–¥–µ–∫—Å –≤ —Ç–∞–±–ª–∏—Ü—ñ
        """
        return hash(key) % self.size

    def insert(self, key, value):
        """
        –í—Å—Ç–∞–≤–ª—è—î –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—é.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            
        Returns:
            bool: True, —è–∫—â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞
        """
        key_hash = self.hash_function(key)
        key_value = [key, value]

        if not self.table[key_hash]:
            self.table[key_hash] = [key_value]
            return True
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∫–ª—é—á
            for pair in self.table[key_hash]:
                if pair[0] == key:
                    pair[1] = value  # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                    return True
            # –Ø–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–∞—Ä—É
            self.table[key_hash].append(key_value)
            return True

    def get(self, key):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –ø–æ—à—É–∫—É
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–Ω—è, –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –∫–ª—é—á–µ–º, –∞–±–æ None, —è–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        key_hash = self.hash_function(key)
        if self.table[key_hash]:
            for pair in self.table[key_hash]:
                if pair[0] == key:
                    return pair[1]
        return None

    def delete(self, key):
        """
        –í–∏–¥–∞–ª—è—î –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            
        Returns:
            bool: True, —è–∫—â–æ –∫–ª—é—á –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ, False - —ñ–Ω–∞–∫—à–µ
        """
        key_hash = self.hash_function(key)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ª–∞–Ω—Ü—é–∂–æ–∫ –∑–∞ —Ü–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º
        if not self.table[key_hash]:
            return False
        
        # –®—É–∫–∞—î–º–æ –∫–ª—é—á —É –ª–∞–Ω—Ü—é–∂–∫—É
        for i, pair in enumerate(self.table[key_hash]):
            if pair[0] == key:
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä—É –∑—ñ —Å–ø–∏—Å–∫—É
                del self.table[key_hash][i]
                return True
        
        # –ö–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        return False

    def display(self):
        """
        –í–∏–≤–æ–¥–∏—Ç—å –≤–µ—Å—å –≤–º—ñ—Å—Ç —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏.
        """
        print("–•–µ—à-—Ç–∞–±–ª–∏—Ü—è:")
        for i, bucket in enumerate(self.table):
            if bucket:
                print(f"  –Ü–Ω–¥–µ–∫—Å {i}: {bucket}")
            else:
                print(f"  –Ü–Ω–¥–µ–∫—Å {i}: –ø–æ—Ä–æ–∂–Ω—å–æ")

    def keys(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤ —É —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ.
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤
        """
        all_keys = []
        for bucket in self.table:
            for pair in bucket:
                all_keys.append(pair[0])
        return all_keys

    def values(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ.
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        """
        all_values = []
        for bucket in self.table:
            for pair in bucket:
                all_values.append(pair[1])
        return all_values

    def items(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è —É —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ.
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–Ω—è)
        """
        all_items = []
        for bucket in self.table:
            for pair in bucket:
                all_items.append((pair[0], pair[1]))
        return all_items

    def __len__(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ.
        
        Returns:
            int: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        """
        count = 0
        for bucket in self.table:
            count += len(bucket)
        return count

    def __contains__(self, key):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—è –∑–∞–¥–∞–Ω–∏–π –∫–ª—é—á.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            
        Returns:
            bool: True, —è–∫—â–æ –∫–ª—é—á —ñ—Å–Ω—É—î, False - —ñ–Ω–∞–∫—à–µ
        """
        return self.get(key) is not None


def test_hashtable():
    """
    –¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ, –≤–∫–ª—é—á–∞—é—á–∏ –º–µ—Ç–æ–¥ delete.
    """
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HashTable –∑ –º–µ—Ç–æ–¥–æ–º delete")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—é
    H = HashTable(5)
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—Ç–∞–≤–∫—É
    print("üìù –í—Å—Ç–∞–≤–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏:")
    test_data = [
        ("apple", 10),
        ("orange", 20),
        ("banana", 30),
        ("grape", 40),
        ("cherry", 50),
        ("mango", 60)
    ]
    
    for key, value in test_data:
        H.insert(key, value)
        print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {key} = {value}")
    
    print(f"\nüìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {len(H)}")
    print("üóÇÔ∏è  –í—Å—ñ –∫–ª—é—á—ñ:", H.keys())
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    print("\nüîç –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ:")
    H.display()
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫
    print("\nüîé –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫:")
    search_keys = ["apple", "banana", "nonexistent"]
    for key in search_keys:
        value = H.get(key)
        print(f"   {key}: {value if value is not None else '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    print("\nüóëÔ∏è  –¢–µ—Å—Ç—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    
    # –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–ª—é—á
    print("   –í–∏–¥–∞–ª—è—î–º–æ 'banana':")
    result = H.delete("banana")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'—É—Å–ø—ñ—à–Ω–æ' if result else '–Ω–µ –≤–¥–∞–ª–æ—Å—è'}")
    print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: banana = {H.get('banana')}")
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –∫–ª—é—á
    print("\n   –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ 'nonexistent':")
    result = H.delete("nonexistent")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'—É—Å–ø—ñ—à–Ω–æ' if result else '–Ω–µ –≤–¥–∞–ª–æ—Å—è'}")
    
    # –í–∏–¥–∞–ª—è—î–º–æ —â–µ –∫—ñ–ª—å–∫–∞ –∫–ª—é—á—ñ–≤
    print("\n   –í–∏–¥–∞–ª—è—î–º–æ 'apple' —Ç–∞ 'grape':")
    for key in ["apple", "grape"]:
        result = H.delete(key)
        print(f"   {key}: {'–≤–∏–¥–∞–ª–µ–Ω–æ' if result else '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    print(f"\nüìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {len(H)}")
    print("üóÇÔ∏è  –ó–∞–ª–∏—à–∏–ª–∏—Å—è –∫–ª—é—á—ñ:", H.keys())
    print("üíé –ó–∞–ª–∏—à–∏–ª–∏—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è:", H.values())
    
    print("\nüîç –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ:")
    H.display()
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä in
    print("\nüîç –¢–µ—Å—Ç—É—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä 'in':")
    test_keys = ["orange", "banana", "cherry"]
    for key in test_keys:
        exists = key in H
        print(f"   '{key}' –≤ —Ç–∞–±–ª–∏—Ü—ñ: {exists}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó (–¥–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –∫–æ–ª—ñ–∑—ñ—ó)
    print("\n‚ö° –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–æ–ª—ñ–∑—ñ–π:")
    H.insert("test1", 100)
    H.insert("test2", 200)
    H.display()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –æ–¥–∏–Ω –∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –∫–æ–ª—ñ–∑—ñ—î—é
    print("\n   –í–∏–¥–∞–ª—è—î–º–æ –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –∑ –º–æ–∂–ª–∏–≤–æ—é –∫–æ–ª—ñ–∑—ñ—î—é:")
    H.delete("test1")
    print(f"   test1 –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {H.get('test1')}")
    print(f"   test2 –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è test1: {H.get('test2')}")


def demo_edge_cases():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –∑ –≥—Ä–∞–Ω–∏—á–Ω–∏–º–∏ –≤–∏–ø–∞–¥–∫–∞–º–∏.
    """
    print("\n" + "=" * 50)
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤")
    print("=" * 50)
    
    H = HashTable(3)  # –ú–∞–ª–µ–Ω—å–∫–∞ —Ç–∞–±–ª–∏—Ü—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–ª—ñ–∑—ñ–π
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    items = [("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5)]
    for key, value in items:
        H.insert(key, value)
    
    print("üì¶ –ó–∞–ø–æ–≤–Ω–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è:")
    H.display()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    print("\nüóëÔ∏è  –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:")
    for key, _ in items:
        result = H.delete(key)
        print(f"   –í–∏–¥–∞–ª–µ–Ω–æ {key}: {result}")
    
    print(f"\nüìä –†–æ–∑–º—ñ—Ä –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è: {len(H)}")
    H.display()
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    print("\nüö´ –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø–æ—Ä–æ–∂–Ω—å–æ—ó —Ç–∞–±–ª–∏—Ü—ñ:")
    result = H.delete("nonexistent")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


if __name__ == "__main__":
    test_hashtable()
    demo_edge_cases()
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–µ—Ç–æ–¥—É delete:")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ö–µ—à-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É")
    print("   ‚Ä¢ –ü–µ—Ä–µ–±–∏—Ä–∞—î –ª–∞–Ω—Ü—é–∂–æ–∫ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–ª—é—á–∞")
    print("   ‚Ä¢ –í–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î True –ø—Ä–∏ —É—Å–ø—ñ—Ö—É")
    print("   ‚Ä¢ –ü–æ–≤–µ—Ä—Ç–∞—î False, —è–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î –∫–æ–ª—ñ–∑—ñ—ó —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ª–∞–Ω—Ü—é–∂–∫–∏")

"""
–ó–∞–≤–¥–∞–Ω–Ω—è 2: –î–≤—ñ–π–∫–æ–≤–∏–π –ø–æ—à—É–∫ –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É –∑ –¥—Ä–æ–±–æ–≤–∏–º–∏ —á–∏—Å–ª–∞–º–∏

–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —ñ—Ç–µ—Ä–∞—Ü—ñ–π —Ç–∞ "–≤–µ—Ä—Ö–Ω—å–æ—é –º–µ–∂–µ—é" - 
–Ω–∞–π–º–µ–Ω—à–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º, —è–∫–∏–π —î –±—ñ–ª—å—à–∏–º –∞–±–æ —Ä—ñ–≤–Ω–∏–º –∑–∞–¥–∞–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é.
"""

def binary_search_with_upper_bound(arr, target):
    """
    –í–∏–∫–æ–Ω—É—î –¥–≤—ñ–π–∫–æ–≤–∏–π –ø–æ—à—É–∫ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ—Ç–µ—Ä–∞—Ü—ñ–π —Ç–∞ –≤–µ—Ä—Ö–Ω—å–æ—ó –º–µ–∂—ñ.
    
    Args:
        arr (list): –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ –¥—Ä–æ–±–æ–≤–∏—Ö —á–∏—Å–µ–ª
        target (float): –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É
        
    Returns:
        tuple: (–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—ñ—Ç–µ—Ä–∞—Ü—ñ–π, –≤–µ—Ä—Ö–Ω—è_–º–µ–∂–∞)
            - –∫—ñ–ª—å–∫—ñ—Å—Ç—å_—ñ—Ç–µ—Ä–∞—Ü—ñ–π: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π, –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–ª—è –ø–æ—à—É–∫—É
            - –≤–µ—Ä—Ö–Ω—è_–º–µ–∂–∞: –Ω–∞–π–º–µ–Ω—à–∏–π –µ–ª–µ–º–µ–Ω—Ç >= target, –∞–±–æ None —è–∫—â–æ —Ç–∞–∫–æ–≥–æ –Ω–µ–º–∞—î
    """
    if not arr:
        return (0, None)
    
    left = 0
    right = len(arr) - 1
    iterations = 0
    upper_bound = None
    
    while left <= right:
        iterations += 1
        mid = (left + right) // 2
        
        if arr[mid] == target:
            # –ó–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è - –≤–æ–Ω–æ —ñ —î –≤–µ—Ä—Ö–Ω—å–æ—é –º–µ–∂–µ—é
            return (iterations, arr[mid])
        elif arr[mid] < target:
            left = mid + 1
        else:
            # arr[mid] > target - —Ü–µ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞
            upper_bound = arr[mid]
            right = mid - 1
    
    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞–ª–µ –∑–Ω–∞–π—à–ª–∏ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É
    if upper_bound is not None:
        return (iterations, upper_bound)
    
    # –Ø–∫—â–æ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ –∑–∞ target
    for element in arr:
        if element >= target:
            return (iterations, element)
    
    # –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–µ–Ω—à—ñ –∑–∞ target
    return (iterations, None)


def binary_search_detailed(arr, target):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –∫—Ä–æ–∫—ñ–≤.
    
    Args:
        arr (list): –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
        target (float): –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É
        
    Returns:
        tuple: (–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—ñ—Ç–µ—Ä–∞—Ü—ñ–π, –≤–µ—Ä—Ö–Ω—è_–º–µ–∂–∞, –ª–æ–≥_–∫—Ä–æ–∫—ñ–≤)
    """
    if not arr:
        return (0, None, ["–ú–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π"])
    
    left = 0
    right = len(arr) - 1
    iterations = 0
    upper_bound = None
    log = []
    
    log.append(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤: {arr}")
    log.append(f"–®—É–∫–∞—î–º–æ: {target}")
    
    while left <= right:
        iterations += 1
        mid = (left + right) // 2
        
        log.append(f"–Ü—Ç–µ—Ä–∞—Ü—ñ—è {iterations}: left={left}, right={right}, mid={mid}")
        log.append(f"  arr[{mid}] = {arr[mid]}")
        
        if arr[mid] == target:
            log.append(f"  –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!")
            return (iterations, arr[mid], log)
        elif arr[mid] < target:
            log.append(f"  {arr[mid]} < {target}, —Ä—É—Ö–∞—î–º–æ—Å—è –≤–ø—Ä–∞–≤–æ")
            left = mid + 1
        else:
            log.append(f"  {arr[mid]} > {target}, —Ä—É—Ö–∞—î–º–æ—Å—è –≤–ª—ñ–≤–æ")
            upper_bound = arr[mid]
            log.append(f"  –ù–æ–≤–∞ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞: {upper_bound}")
            right = mid - 1
    
    if upper_bound is not None:
        log.append(f"–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –∑–Ω–∞–π–¥–µ–Ω–∞: {upper_bound}")
        return (iterations, upper_bound, log)
    
    # –Ø–∫—â–æ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É, —à—É–∫–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç >= target
    for element in arr:
        if element >= target:
            log.append(f"–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ (–ª—ñ–Ω—ñ–π–Ω–∏–π –ø–æ—à—É–∫): {element}")
            return (iterations, element, log)
    
    log.append("–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ - –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–µ–Ω—à—ñ –∑–∞ target")
    return (iterations, None, log)


def test_binary_search():
    """
    –¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö.
    """
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –∑ –≤–µ—Ä—Ö–Ω—å–æ—é –º–µ–∂–µ—é")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ñ –º–∞—Å–∏–≤–∏
    test_arrays = [
        [1.1, 2.3, 3.5, 4.7, 5.9, 7.1, 8.3, 9.5],
        [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0],
        [10.0, 20.0, 30.0, 40.0, 50.0],
        [3.14159, 2.71828, 1.41421, 0.57722],  # –ù–µ—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
        []  # –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
    ]
    
    # –°–æ—Ä—Ç—É—î–º–æ –Ω–µ—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
    test_arrays[3] = sorted(test_arrays[3])
    
    test_cases = [
        # (–º–∞—Å–∏–≤_—ñ–Ω–¥–µ–∫—Å, –∑–Ω–∞—á–µ–Ω–Ω—è_–¥–ª—è_–ø–æ—à—É–∫—É, –æ–ø–∏—Å)
        (0, 3.5, "—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ"),
        (0, 3.6, "–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏"),
        (0, 0.5, "–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ"),
        (0, 10.0, "–∑–Ω–∞—á–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ"),
        (0, 1.1, "—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É"),
        (0, 9.5, "—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫—ñ–Ω—Ü—ñ"),
        (1, 2.25, "–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏"),
        (1, 5.5, "–∑–Ω–∞—á–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ"),
        (2, 25.0, "–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏"),
        (2, 5.0, "–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ"),
        (3, 1.5, "–∑–Ω–∞—á–µ–Ω–Ω—è –≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É –º–∞—Å–∏–≤—ñ"),
        (4, 1.0, "–ø–æ—à—É–∫ –≤ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É –º–∞—Å–∏–≤—ñ"),
    ]
    
    for i, (arr_idx, target, description) in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {description}")
        
        if arr_idx < len(test_arrays):
            arr = test_arrays[arr_idx]
            print(f"   –ú–∞—Å–∏–≤: {arr}")
            print(f"   –®—É–∫–∞—î–º–æ: {target}")
            
            iterations, upper_bound = binary_search_with_upper_bound(arr, target)
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ({iterations} —ñ—Ç–µ—Ä–∞—Ü—ñ–π, –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞: {upper_bound})")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ
            if upper_bound is not None:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ upper_bound >= target
                if upper_bound >= target:
                    print(f"   ‚úì –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∞: {upper_bound} >= {target}")
                else:
                    print(f"   ‚úó –ü–æ–º–∏–ª–∫–∞: {upper_bound} < {target}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –Ω–∞–π–º–µ–Ω—à–∏–π —Ç–∞–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç
                smaller_elements = [x for x in arr if x >= target and x < upper_bound]
                if not smaller_elements:
                    print(f"   ‚úì –¶–µ –Ω–∞–π–º–µ–Ω—à–∏–π –µ–ª–µ–º–µ–Ω—Ç >= {target}")
                else:
                    print(f"   ‚úó –ó–Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏: {smaller_elements}")
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥—ñ–π—Å–Ω–æ –Ω–µ–º–∞—î –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ >= target
                valid_elements = [x for x in arr if x >= target]
                if not valid_elements:
                    print(f"   ‚úì –ö–æ—Ä–µ–∫—Ç–Ω–æ: –Ω–µ–º–∞—î –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ >= {target}")
                else:
                    print(f"   ‚úó –ü–æ–º–∏–ª–∫–∞: –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ >= {target}: {valid_elements}")


def demo_detailed_search():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
    """
    print("\n" + "=" * 60)
    print("üî¨ –î–µ—Ç–∞–ª—å–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É")
    print("=" * 60)
    
    arr = [1.1, 2.3, 3.5, 4.7, 5.9, 7.1, 8.3, 9.5]
    targets = [3.6, 7.1, 0.5, 10.0]
    
    for target in targets:
        print(f"\nüéØ –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –¥–ª—è {target}:")
        print("-" * 40)
        
        iterations, upper_bound, log = binary_search_detailed(arr, target)
        
        for line in log:
            print(f"   {line}")
        
        print(f"\n   üìä –ü—ñ–¥—Å—É–º–æ–∫:")
        print(f"   ‚Ä¢ –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {iterations}")
        print(f"   ‚Ä¢ –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞: {upper_bound}")


def benchmark_search():
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –∑ –ª—ñ–Ω—ñ–π–Ω–∏–º.
    """
    import time
    import random
    
    print("\n" + "=" * 60)
    print("‚ö° –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
    size = 100000
    arr = sorted([random.uniform(0, 1000) for _ in range(size)])
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    test_targets = [random.uniform(0, 1000) for _ in range(1000)]
    
    # –õ—ñ–Ω—ñ–π–Ω–∏–π –ø–æ—à—É–∫ –≤–µ—Ä—Ö–Ω—å–æ—ó –º–µ–∂—ñ
    def linear_search_upper_bound(arr, target):
        iterations = 0
        for element in arr:
            iterations += 1
            if element >= target:
                return iterations, element
        return iterations, None
    
    print(f"üìä –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ –º–∞—Å–∏–≤—ñ –∑ {size:,} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
    print(f"üéØ –í–∏–∫–æ–Ω—É—î–º–æ {len(test_targets)} –ø–æ—à—É–∫—ñ–≤")
    
    # –î–≤—ñ–π–∫–æ–≤–∏–π –ø–æ—à—É–∫
    start_time = time.time()
    binary_results = []
    total_binary_iterations = 0
    
    for target in test_targets:
        iterations, upper_bound = binary_search_with_upper_bound(arr, target)
        binary_results.append((iterations, upper_bound))
        total_binary_iterations += iterations
    
    binary_time = time.time() - start_time
    
    # –õ—ñ–Ω—ñ–π–Ω–∏–π –ø–æ—à—É–∫ (—Ç–µ—Å—Ç—É—î–º–æ –Ω–∞ –º–µ–Ω—à—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
    small_test = test_targets[:100]  # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 100 –≤–∏–ø–∞–¥–∫—ñ–≤
    start_time = time.time()
    linear_results = []
    total_linear_iterations = 0
    
    for target in small_test:
        iterations, upper_bound = linear_search_upper_bound(arr, target)
        linear_results.append((iterations, upper_bound))
        total_linear_iterations += iterations
    
    linear_time = time.time() - start_time
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print(f"   –î–≤—ñ–π–∫–æ–≤–∏–π –ø–æ—à—É–∫:")
    print(f"     ‚Ä¢ –ß–∞—Å: {binary_time:.4f} —Å–µ–∫")
    print(f"     ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π: {total_binary_iterations/len(test_targets):.1f}")
    print(f"     ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π: {total_binary_iterations:,}")
    
    print(f"   –õ—ñ–Ω—ñ–π–Ω–∏–π –ø–æ—à—É–∫ (100 —Ç–µ—Å—Ç—ñ–≤):")
    print(f"     ‚Ä¢ –ß–∞—Å: {linear_time:.4f} —Å–µ–∫")
    print(f"     ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π: {total_linear_iterations/len(small_test):.1f}")
    print(f"     ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —á–∞—Å –¥–ª—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤: {linear_time * 10:.4f} —Å–µ–∫")
    
    speedup = (linear_time * 10) / binary_time
    print(f"   ‚ö° –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {speedup:.1f}x")


if __name__ == "__main__":
    test_binary_search()
    demo_detailed_search()
    benchmark_search()
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó:")
    print("   ‚Ä¢ –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π —Ç–∞ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É")
    print("   ‚Ä¢ –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ - –Ω–∞–π–º–µ–Ω—à–∏–π –µ–ª–µ–º–µ–Ω—Ç >= target")
    print("   ‚Ä¢ –û–±—Ä–æ–±–ª—è—î –≤–∏–ø–∞–¥–∫–∏, –∫–æ–ª–∏ –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –≤—ñ–¥—Å—É—Ç–Ω—è")
    print("   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å O(log n) –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ O(n) –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É")
